Fast log is a C/C++ logging library and/or standalone server.

Why would you want to use it?
=============================
Because it is faster than any other logging library for C and C++ and is better
for performing logging for user space real time applications or for any other type of application for that matter.

For this purposes of this document here are some definitions:
- client: is the piece of code that wants to log something.
- server: is the piece of code that actually does the logging.

Client speed:
=============
fastlog works using shared memory and is built on the assumption that the most crucial
part of logging is the time it takes the logger code to log a message. The logger may
be a real time thread and so the log action itself should take the minimal time possible.
A logging action by the client is therefore just copying the message to a ring buffer.

Server speed:
=============
The server logs the actual data to the system logger (syslog) using polling of the shared memory area. it uses
yield and sleep when it finds that it has nothing to log. The polling speed can be controlled and it can
also listen to signals so that clients can tell it that log message are awaiting in the ring buffer.

Thread safetiness:
==================
You can log using fastlog from multiple threads and multiple processes. The management data for the
logging is stored in the shared memory and is protected by fast locks (spinlocks futexes or atomics).

Time stamps:
============
syslog(3) calls time(2) every time you call it to record the original time of the message. This library does not do this since time(2) is a system call and hence too expensive this logging library to use. There is an option to send the RDTSC instead (which is a register accessible quite fast from user space). However, this is an Intel feature only. If you know of similar features on other hardware platforms, please submit patches.

Langugage:
==========
C was selected since this library should be usable from any C program.

Server or library:
==================
This project should be usable BOTH as a library that you can hook to and as a server.

Threads, processes etc...
=========================
As a goal the logging library should be a process and not a thread. Why? Because I want it
to stay alive after the original process has died. This is essential in case you are using
the logging feature for debugging in which case you want to see the last messages that were
sent before you died. It may be that this library could be used to spawn a thread as well.

API:
====
- This library should be a stand in for the syslog API (meaning that any program that
uses syslog should be able to use it as is). This is currently not the case.
- The library has it's own API under the syslog API that allows you to have more power. Use it
at your will.

Other projects of the same nature or resources:
===============================================
http://thekelleys.org.uk/syslog-async/
	This project is interesting.
	It does not open an async thread to do the actuall logging
	and so is unsuitable for a hard real time system.
syslog-ng
rsyslog
kernel logging subsystem

platforms:
==========
Currently only linux 2.6 is supported.
